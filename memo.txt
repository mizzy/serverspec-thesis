4章のメモ

テスト系ASPの増加という視点をいれてみるとどうなるか。昨今、テストに関してTravisやWeckerなどのツールが登場してきているのは、複雑性が増大しすぎてマジでテストしないとなんともならなくなってきたからなわけですが、インフラにおいてもそれがいえるんだけど、いいツールがなかった、という。

もひとつ。technical debtを管理するという視点。

アプリコードは当然、サーバも経年とともにtechnical debtをマネジしなければならないというところから逃れられない。そのためにはテストが必要。
単にテストすればいいわけじゃなくて、ツールの利用それ自体(Chef/Puppet他)もtechnical debt化の要因なので、ツール独立性がとても重要。

みたいな。

technical debtをマネジするということの論点については、以下があれこれあげている。
http://www.itrd.gov/subcommittee/sdp/foser/Managing%20Technical%20Debt%20in%20Software-Reliant%20Systems%20-%20p47.pdf

でもどっちも、ないから作りました、というだけで、評価に結びつけるのが難しいな……。ただ、technical debtとの関連なら、テストの導入がどういう効果をもたらしたのかという評価はありそうかなあ。でも、それだけじゃないし、という。

これまでに類似のテストフレームワークが存在した中serverspecが公開後、急速に採用が増加している原因はどこにあるのでしょうか？そこに現状言及可能な各社の実績や運用上の利点を運用している観点から主張しておいて、評価は今後の課題とするか、あるいは、評価方法で悩んでいるのでアドバイスを欲しいと言ってしまっても良いです。もし、今後に向けて定量的な評価を出す手法が想定されているなら、今後このように評価して行く予定です、と言ってもよいです。

色々見ていると、serverspecの評価は、それによってどのように品質が向上するか？、という点も含まれていると思うのですが、そもそもの「システムやソフトウェアの品質の評価や定義」というのはそれ自体研究分野になっているので、評価自体難しい話題のように感じます。ですので、そういう点で研究の範囲を広げていくというやり方も一つですね。

例えば、serverspecの評価は課題としておいて、評価方法を今後考えて、その方法自体が論文になるようにする、その方法でserverspecを評価してみる、というようなやり方です。


----

3章ざっくり書いてみました。流れは以下の様に想定してます。

* 2章で示した従来手法の問題点を更に分解する
* その上で問題解決に必要な要件を示す
* 要件を満たすためのアイデアを「汎用コマンド実行フレームワーク」と「制御テストフレームワーク」の2つにわけて述べる
* アイデアの実装としてSpecInfra、serverspecについて説明する
* フレームワークを用途毎に分離したメリットについて説明する

この流れで問題ないでしょうか？

問題がない場合は、この流れを踏まえた上で、更に以下の様に進めたいと思います。

* 今の文章ではまだ各項目のつながりが不明瞭なので論理展開をしっかりする
* アイデアの説明は抽象的すぎてわかりにくい気がするので説明を工夫する、図で示す等する
* 実装の説明はどこまで踏み込むべきなのかまだ見えてないのでまずはそこから検討する


2章メモ

その後様々な構成管理ツールが登場している\cite{cmt}が、基本的にはCFEngineにより提唱された以下の基本原則を具体化したものである\cite{web operation}。

\begin{description}
  \item[宣言的] 何をしたいかであって、どうするかではない
  \item[抽象化] あなたの代わりに詳細の面倒をみてくれる
  \item[べき等性] 必要なときだけ実行する
  \item[収束化] 放っておけばどうにかなる
\end{description}

2006年のAmazon EC2の登場によりサーバを手軽に構築・破棄できるような環境が普及すると、構成管理ツールが持つ「サーバの構成をコードで記述する」ことによる繰り返し特性と相性が良く、''Infrastucture as Code''という言葉が出て、Agile infrastructure and operationsという流れができる。


2009 年のChefの登場。Chefは特にコードの特性が強く、そこからテスト駆動に発展。

dry-run mode
lint
unit test
結合テスト

PuppetとChefの説明。宣言的な言語。

そしてChefを中心にTest-Driven Infractureという概念が提唱され、ツールも出そろってきている。

しかしテストツールにおいては構成管理ツールに見られるような宣言的、抽象化の原則が適用されているものがないか、特定の構成管理ツールに依存しているものが主である。

べき等性と収束化はテストツールには無関係。副作用を及ぼす操作についてのみの話。

テストツールの記述例。

構成管理ツール自体にテストの側面があるためあまり重要視されてこなかった。
（なぜ今は重要視されるようになってるのか？）

構成管理ツールにおける宣言的言語での


テスト手法の流れ。

Test-Driven InfrastructureがChef界隈から出た流れ。

テスト駆動インフラするために必要な要件の明示。
既存手法ではテスト駆動インフラに必要な要件を十分満たせていないことを示す。

テスト駆動インフラの有用性
 * リファクタリング

テスト駆動インフラのために必要な要件
 * 構成管理ツールに依存しない
 * メンテナンス性
   * 読みやすさ
   * 書きやすさ
   * シンプルさ
